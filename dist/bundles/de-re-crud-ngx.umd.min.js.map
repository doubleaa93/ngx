{"version":3,"sources":["ng://@de-re-crud/ngx/src/app/core/hosts/component-host.directive.ts","null","ng://@de-re-crud/ngx/src/app/providers/provider/provider.service.ts","ng://@de-re-crud/ngx/src/app/core/validators/whitespace-validator.ts","ng://@de-re-crud/ngx/src/app/core/services/form-builder.service.ts","ng://@de-re-crud/ngx/src/app/core/services/form-state.service.ts","ng://@de-re-crud/ngx/src/app/core/hosts/collection-field-host.component.ts","ng://@de-re-crud/ngx/src/app/core/hosts/input-field-host.component.ts","ng://@de-re-crud/ngx/src/app/core/hosts/button-host.component.ts","ng://@de-re-crud/ngx/src/app/core/hosts/stamp-field-host.component.ts","ng://@de-re-crud/ngx/src/app/core/hosts/form-host/form-host.component.ts","ng://@de-re-crud/ngx/src/app/core/core.module.ts","ng://@de-re-crud/ngx/src/app/forms/form/form.component.ts","ng://@de-re-crud/ngx/src/app/forms/forms.module.ts","ng://@de-re-crud/ngx/src/app/core/validation-error-helper.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/control-container-renderer/control-container-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/provider/provider.module.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/input-renderer/input-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/select-renderer/select-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/label-renderer/label-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/button-renderer/button-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/table-renderer/table-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/checkbox-renderer/checkbox-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/help-renderer/help-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/validation-errors-renderer/validation-errors-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/inline-renderer/inline-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/stamp-renderer/stamp-renderer.component.ts","ng://@de-re-crud/ngx/src/app/providers/bootstrap3/bootstrap3.module.ts"],"names":["ComponentHostDirective","viewContainerRef","this","Directive","args","selector","ViewContainerRef","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","DeReCrudProviderService","register","name","options","_cache","get","Error","Injectable","whitespaceValidator","control","trim","required","FormBuilderService","fb","group","struct","blockName","blocks","fields","block","_b","tslib_1.__values","_c","fieldReference","field","type","validators","getValidators","initialValue","linkedStructField","reference","array","minInstances","formGroup","patchValue","_this","forEach","item","formArray","setValue","root","parent","FormGroup","condition","Validators","minLength","maxLength","min","max","compose","FormBuilder","FormStateService","formBuilder","generateId","Math","random","assignDefaults","headerSize","parseLabel","label","short","parseSchema","structs","_e","schema","_f","structSchema","collectionLabel","_g","_h","fieldSchema","placeholder","_j","_k","blockSchema","_l","_m","returnValue","Function","defaultConditionFunc","id","create","initialErrors","arrayToMap","state","form","submissionErrors","onSubmissionErrorsChange","Subject","navigationStack","onNavigationChange","onValueChange","createForm","formId","_a","update","remove","clearErrors","formPath","pushSubmissionErrorsChange","setErrors","errors","onChange","newValue","event","changeNotificationType","fieldPath","formValue","pushNavigation","path","parentPath","pushNavigationChange","popNavigation","pop","completeNavigation","childId","getKey","reduce","acc","current","Map","CollectionFieldHostComponent","stateService","componentFactoryResolver","providerService","stopPropagation","preventDefault","index","controls","indexOf","childPath","layout","ngOnInit","render","ngOnChanges","changes","firstChange","updateInputs","ngOnDestroy","_componentRef","destroy","controlComponent","providerOptions","provider","inlineComponent","tableComponent","console","JSON","stringify","componentHost","clear","componentFactory","resolveComponentFactory","createComponent","componentRenderer","onAdd","previousControl","onComponentChange","change_1","previousValue","currentValue","isFirstChange","Component","template","ComponentFactoryResolver","ViewChild","Input","InputFieldHostComponent","_valueOnFocus","defineProperty","parentForm","FormArray","find","x","_submissionErrorsChangeSubscription","subscribe","_formChangeSubscription","valueChanges","shouldRender","_componentRefs","destroyRefs","unsubscribe","inputComponent","checkboxComponent","selectComponent","containerComponentFactory","containerComponent","controlComponentFactory","controlComponentRef","containerComponentRef","undefined","location","nativeElement","rendererType","mapType","htmlId","onFocus","onBlur","listField_1","selectControl","collectionControl","linkedStructField_1","hints","referenceBlock","fieldReferences","nestedFields","fieldReferences_1","fieldReferences_1_1","nestedValues","_d","nestedValue","stamp","text","canAdd","maxInstances","componentRef","ButtonHostComponent","EventEmitter","click","emit","buttonComponent","submitButtonStyle","cancelButtonStyle","isSubmit","style","appendSchemaLabel","extraClasses","extraButtonClasses","split","button","disabled","onClick","class","Output","StampFieldHostComponent","stampComponent","stampField","displayClassNames","classes","previousStamp","FormHostComponent","_struct","_block","DeReCrudCoreModule","NgModule","imports","CommonModule","ReactiveFormsModule","declarations","providers","exports","entryComponents","FormComponent","_cancelVisible","submitting","valid","navigationStackCount","_navigationChangeSubscription","change","valueChange","child","blockFields","getBlockFields","references","references_1","references_1_1","onCancel","cancelEnabled","cancel","reset","onSubmit","submitEnabled","submit","onComplete","styles","DeReCrudFormsModule","ValidationErrorHelper","getFormControlIfErrorFound","formControl","touched","hasError","getErrors","sortedErrors","unsortedErrors","keys","key","sort","_errorSort","metadata","map","getErrorMessage","requiredLength","Bootstrap3ControlContainerRendererComponent","getClasses","has-error","has-feedback","DeReCrudProviderModule","Bootstrap3InputRendererComponent","Bootstrap3SelectRendererComponent","Bootstrap3LabelRendererComponent","Bootstrap3ButtonRendererComponent","_classes","updateClasses","Bootstrap3TableRendererComponent","getValue","fieldValue","Bootstrap3CheckboxRendererComponent","Bootstrap3HelpRendererComponent","Bootstrap3ValidationErrorsRendererComponent","Bootstrap3InlineRendererComponent","Bootstrap3StampRendererComponent","Bootstrap3DeReCrudProviderModule"],"mappings":"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","sourcesContent":["import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[deReCrudComponentHost]'\r\n})\r\nexport class ComponentHostDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) {}\r\n}\r\n\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DeReCrudProviderOptions } from './provider-options';\r\n\r\n@Injectable()\r\nexport class DeReCrudProviderService {\r\n  private _cache: { [name: string]: DeReCrudProviderOptions } = {};\r\n\r\n  register(name: string, options: DeReCrudProviderOptions) {\r\n    this._cache[name] = options;\r\n  }\r\n\r\n  get(name: string): DeReCrudProviderOptions {\r\n    const options = this._cache[name];\r\n    if (!options) {\r\n      throw new Error(`Provider '${name}' is not registered. Make sure register(name, options) is called in the applicatio root.`);\r\n    }\r\n\r\n    return options;\r\n  }\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nexport const whitespaceValidator = (control: AbstractControl) => {\r\n  const isWhiteSpace = (control.value || '').trim().length === 0;\r\n\r\n  return !isWhiteSpace ? null : { required: true };\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormArray\r\n} from '@angular/forms';\r\nimport {\r\n  IField,\r\n  ITextField,\r\n  ILinkedStructField,\r\n  IBlock,\r\n  IIntegerField,\r\n  IFieldReference\r\n} from '../models/schema';\r\nimport { whitespaceValidator } from '../validators/whitespace-validator';\r\n\r\n@Injectable()\r\nexport class FormBuilderService {\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  group(\r\n    struct: string,\r\n    blockName: string,\r\n    blocks: Map<string, IBlock>,\r\n    fields: Map<string, IField>,\r\n    value = {}\r\n  ): FormGroup {\r\n    const group = {};\r\n    const block = blocks[`${struct}-${blockName}`];\r\n\r\n    for (const fieldReference of block.fields) {\r\n      const field = fields[`${struct}-${fieldReference.field}`];\r\n\r\n      if (field.type === 'stamp') {\r\n        continue;\r\n      }\r\n\r\n      if (field.type === 'linkedStruct') {\r\n        const linkedStructField = <ILinkedStructField>field;\r\n        const { reference } = linkedStructField;\r\n\r\n        const array = this.array(\r\n          reference.struct,\r\n          reference.block,\r\n          blocks,\r\n          fields,\r\n          value[field.name]\r\n        );\r\n\r\n        if (!array.value.length && linkedStructField.minInstances > 0) {\r\n          // tslint:disable-next-line:no-increment-decrement\r\n          for (let i = 0; i < linkedStructField.minInstances; i++) {\r\n            array.push(this.group(reference.struct, reference.block, blocks, fields));\r\n          }\r\n        }\r\n\r\n        group[field.name] = array;\r\n\r\n        continue;\r\n      }\r\n\r\n      const validators = this.getValidators(fieldReference, field);\r\n      const initialValue = value[field.name] || field.initialValue;\r\n\r\n      group[field.name] = [initialValue, validators];\r\n    }\r\n\r\n    const formGroup = this.fb.group(group);\r\n\r\n    if (!formGroup.value) {\r\n      formGroup.patchValue({});\r\n    }\r\n\r\n    return formGroup;\r\n  }\r\n\r\n  array(\r\n    struct: string,\r\n    blockName: string,\r\n    blocks: Map<string, IBlock>,\r\n    fields: Map<string, IField>,\r\n    value = []\r\n  ): FormArray {\r\n    const array = [];\r\n\r\n    if (value && value.length) {\r\n      value.forEach((item) => {\r\n        const group = this.group(struct, blockName, blocks, fields, item);\r\n\r\n        array.push(group);\r\n      });\r\n    }\r\n\r\n    const formArray = this.fb.array(array);\r\n    if (!formArray.value) {\r\n      formArray.setValue([]);\r\n    }\r\n\r\n    return formArray;\r\n  }\r\n\r\n\r\n\r\n  private getValidators(fieldReference: IFieldReference, field: IField) {\r\n    return (control: AbstractControl) => {\r\n      const validators = [];\r\n\r\n      const root = control.root;\r\n      const parent = control.parent;\r\n\r\n      if (\r\n        parent instanceof FormGroup &&\r\n        !fieldReference.condition(parent.value, root.value)\r\n      ) {\r\n        return null;\r\n      }\r\n\r\n      if (field.required) {\r\n        validators.push(Validators.required, whitespaceValidator);\r\n      }\r\n\r\n      if ((<ITextField>field).minLength) {\r\n        validators.push(Validators.minLength((<ITextField>field).minLength));\r\n      }\r\n\r\n      if ((<ITextField>field).maxLength) {\r\n        validators.push(Validators.maxLength((<ITextField>field).maxLength));\r\n      }\r\n\r\n      if ((<IIntegerField>field).min) {\r\n        validators.push(Validators.min((<IIntegerField>field).min));\r\n      }\r\n\r\n      if ((<IIntegerField>field).max) {\r\n        validators.push(Validators.max((<IIntegerField>field).max));\r\n      }\r\n\r\n      if (!validators.length) {\r\n        return null;\r\n      }\r\n\r\n      return Validators.compose(validators)(control);\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { DeReCrudOptions } from '../models/options';\r\nimport { IStruct, IField, IBlock } from '../models/schema';\r\nimport { FormSubmissionErrors } from '../models/form-submission';\r\nimport { FormBuilderService } from './form-builder.service';\r\nimport { FormChange } from '../models/form-change';\r\nimport { FormState } from '../models/form-state';\r\n\r\nexport type GetKeyFunction<T> = (item: T) => string;\r\n\r\n@Injectable()\r\n// @dynamic\r\nexport class FormStateService {\r\n  // tslint:disable-next-line:no-function-constructor-with-string-args\r\n  private static defaultConditionFunc = new Function('return true');\r\n  private _cache: { [id: number]: FormState } = {};\r\n\r\n  constructor(private formBuilder: FormBuilderService) {}\r\n\r\n  static generateId() {\r\n    return Math.random();\r\n  }\r\n\r\n  static assignDefaults(options: DeReCrudOptions) {\r\n    if (!options.headerSize) {\r\n      options.headerSize = 3;\r\n    }\r\n  }\r\n\r\n  // TODO: This should expand strings into a label object; the renderers should handle which label to show based on screen size\r\n  static parseLabel(label: string | { short: string }) {\r\n    if (typeof label === 'string') {\r\n      return label;\r\n    }\r\n\r\n    return label.short;\r\n  }\r\n\r\n  static parseSchema(options: DeReCrudOptions) {\r\n    const structs: IStruct[] = [];\r\n    const fields: IField[] = [];\r\n    const blocks: IBlock[] = [];\r\n\r\n    for (const structSchema of options.schema) {\r\n      const struct = {\r\n        ...structSchema,\r\n        label: this.parseLabel(structSchema.label),\r\n        collectionLabel: this.parseLabel(structSchema.label),\r\n        fields: [],\r\n        blocks: []\r\n      };\r\n\r\n      for (const fieldSchema of structSchema.fields) {\r\n        const label = this.parseLabel(fieldSchema.label);\r\n\r\n        const field = {\r\n          ...fieldSchema,\r\n          label,\r\n          placeholder: fieldSchema.placeholder || label,\r\n          struct: structSchema.name\r\n        };\r\n\r\n        if (field.reference && !field.reference.block) {\r\n          field.reference.block = 'default';\r\n        }\r\n\r\n        fields.push(field);\r\n        struct.fields.push(field.name);\r\n      }\r\n\r\n      for (const blockSchema of structSchema.blocks) {\r\n        const block = {\r\n          ...blockSchema,\r\n          fields: [],\r\n          struct: structSchema.name\r\n        };\r\n\r\n        for (const reference of blockSchema.fields) {\r\n          if (!reference) {\r\n            continue;\r\n          }\r\n\r\n          const fieldReference = reference.field\r\n            ? reference\r\n            : { field: reference };\r\n\r\n          let condition;\r\n\r\n          if (fieldReference.condition) {\r\n            const returnValue =\r\n              fieldReference.condition[0] === '{'\r\n                ? fieldReference.condition\r\n                : `return ${fieldReference.condition}`;\r\n\r\n            // tslint:disable-next-line:no-function-constructor-with-string-args\r\n            condition = new Function('value', 'rootValue', returnValue);\r\n          } else {\r\n            // tslint:disable-next-line:no-function-constructor-with-string-args\r\n            condition = FormStateService.defaultConditionFunc;\r\n          }\r\n\r\n          fieldReference.condition = condition;\r\n          block.fields.push(fieldReference);\r\n        }\r\n\r\n        blocks.push(block);\r\n        struct.blocks.push(block.name);\r\n      }\r\n\r\n      structs.push(struct);\r\n    }\r\n\r\n    return {\r\n      structs,\r\n      fields,\r\n      blocks\r\n    };\r\n  }\r\n\r\n  get(id: number): FormState {\r\n    return this._cache[id];\r\n  }\r\n\r\n  create(options: DeReCrudOptions, value: object, initialErrors?: FormSubmissionErrors): FormState {\r\n    let id: number;\r\n\r\n    while (true) {\r\n      id = FormStateService.generateId();\r\n\r\n      if (this._cache[id]) {\r\n        continue;\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    FormStateService.assignDefaults(options);\r\n\r\n    const schema = FormStateService.parseSchema(options);\r\n    const structs = this.arrayToMap(struct => struct.name, schema.structs);\r\n    const fields = this.arrayToMap(\r\n      field => `${field.struct}-${field.name}`,\r\n      schema.fields\r\n    );\r\n\r\n    const blocks = this.arrayToMap(\r\n      block => `${block.struct}-${block.name}`,\r\n      schema.blocks\r\n    );\r\n\r\n    const form = this.formBuilder.group(\r\n      options.struct,\r\n      options.block,\r\n      blocks,\r\n      fields,\r\n      value\r\n    );\r\n\r\n    const state: FormState = {\r\n      id,\r\n      options,\r\n      form,\r\n      structs,\r\n      fields,\r\n      blocks,\r\n      submissionErrors: initialErrors,\r\n      onSubmissionErrorsChange: new Subject<FormSubmissionErrors>(),\r\n      navigationStack: [],\r\n      onNavigationChange: new Subject<number>(),\r\n      onValueChange: new Subject<FormChange>()\r\n    };\r\n\r\n    this._cache[id] = state;\r\n\r\n    return state;\r\n  }\r\n\r\n  createForm(formId: number, struct: string, block: string): FormGroup {\r\n    if (!this._cache[formId]) {\r\n      return;\r\n    }\r\n\r\n    const { fields, blocks } = this._cache[formId];\r\n    return this.formBuilder.group(struct, block, blocks, fields);\r\n  }\r\n\r\n  update(id: number, value: object) {\r\n    if (!this._cache[id]) {\r\n      return;\r\n    }\r\n\r\n    const { form } = this._cache[id];\r\n\r\n    form.patchValue(value);\r\n  }\r\n\r\n  remove(id: number) {\r\n    if (!this._cache[id]) {\r\n      return;\r\n    }\r\n\r\n    delete this._cache[id];\r\n  }\r\n\r\n  clearErrors(id: number, formPath?: string) {\r\n    if (!this._cache[id]) {\r\n      return;\r\n    }\r\n\r\n    if (formPath) {\r\n      delete this._cache[id].submissionErrors[formPath];\r\n    } else {\r\n      this._cache[id].submissionErrors = {};\r\n    }\r\n\r\n    this.pushSubmissionErrorsChange(id);\r\n  }\r\n\r\n  setErrors(id: number, errors: FormSubmissionErrors) {\r\n    if (!this._cache[id]) {\r\n      return;\r\n    }\r\n\r\n    this._cache[id].submissionErrors = errors;\r\n    this.pushSubmissionErrorsChange(id);\r\n  }\r\n\r\n  onChange(id: number, formPath: string, newValue: any, event: string) {\r\n    if (!this._cache[id]) {\r\n      return;\r\n    }\r\n\r\n    const state = this._cache[id];\r\n    this.clearErrors(id, formPath);\r\n\r\n    if (event && state.options.changeNotificationType !== event) {\r\n      return;\r\n    }\r\n\r\n    (<Subject<FormChange>>state.onValueChange).next({\r\n      fieldPath: formPath,\r\n      value: newValue,\r\n      formValue: state.form.value\r\n    });\r\n  }\r\n\r\n  pushNavigation(id: number, struct: string, block: string, path: string, parentPath: string) {\r\n    if (!this._cache[id]) {\r\n      return;\r\n    }\r\n\r\n    this._cache[id].navigationStack.push({\r\n      struct,\r\n      block,\r\n      path,\r\n      parentPath\r\n    });\r\n\r\n    this.pushNavigationChange(id);\r\n  }\r\n\r\n  popNavigation(id: number) {\r\n    if (!this._cache[id]) {\r\n      return;\r\n    }\r\n\r\n    this._cache[id].navigationStack.pop();\r\n\r\n    this.pushNavigationChange(id);\r\n  }\r\n\r\n  completeNavigation(id: number) {\r\n    if (!this._cache[id]) {\r\n      return;\r\n    }\r\n\r\n    this.popNavigation(id);\r\n  }\r\n\r\n  private pushNavigationChange(id: number, childId?: number) {\r\n    const state = this._cache[id];\r\n    (<Subject<number>>state.onNavigationChange).next(childId);\r\n  }\r\n\r\n  private pushSubmissionErrorsChange(id: number) {\r\n    const state = this._cache[id];\r\n    (<Subject<FormSubmissionErrors>>state.onSubmissionErrorsChange).next(\r\n      state.submissionErrors\r\n    );\r\n  }\r\n\r\n  private arrayToMap<T>(getKey: GetKeyFunction<T>, array: T[]) {\r\n    return array.reduce<Map<string, T>>((acc, current) => {\r\n      acc[getKey(current)] = current;\r\n      return acc;\r\n    }, new Map<string, T>());\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ComponentFactoryResolver,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  ComponentRef,\r\n  ViewChild,\r\n  OnChanges,\r\n  SimpleChange\r\n} from '@angular/core';\r\nimport { CollectionControlRenderer, ICollectionControl } from '../renderers/control.renderer';\r\nimport { IReferenceField } from '../models/schema';\r\nimport { FormState } from '../models/form-state';\r\nimport { FormStateService } from '../services/form-state.service';\r\nimport { DeReCrudProviderService } from '../../providers/provider/provider.service';\r\nimport { ComponentHostDirective } from './component-host.directive';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-collection-field-host',\r\n  template: `<ng-template deReCrudComponentHost></ng-template>`\r\n})\r\nexport class CollectionFieldHostComponent implements OnInit, OnChanges, OnDestroy, CollectionControlRenderer {\r\n  private _componentRef: ComponentRef<any>;\r\n  @ViewChild(ComponentHostDirective) componentHost: ComponentHostDirective;\r\n  @Input() control: ICollectionControl;\r\n  state: FormState;\r\n\r\n  constructor(\r\n    private stateService: FormStateService,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private providerService: DeReCrudProviderService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.state = this.stateService.get(this.control.formId);\r\n    this.render();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.control && !changes.control.firstChange) {\r\n      this.updateInputs();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._componentRef) {\r\n      this._componentRef.destroy();\r\n      this._componentRef = null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this._componentRef) {\r\n      this._componentRef.destroy();\r\n      this._componentRef = null;\r\n    }\r\n\r\n    let controlComponent: any;\r\n\r\n    const providerOptions = this.providerService.get(\r\n      this.state.options.provider\r\n    );\r\n\r\n    switch (this.control.layout) {\r\n      case 'inline':\r\n        controlComponent = providerOptions.inlineComponent;\r\n        break;\r\n      case 'table':\r\n        controlComponent = providerOptions.tableComponent;\r\n        break;\r\n      default:\r\n        console.error(\r\n          `${this.control.layout} layout is not supported.`,\r\n          JSON.stringify(this.control.field)\r\n        );\r\n        return;\r\n    }\r\n\r\n    const viewContainerRef = this.componentHost.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(\r\n      controlComponent\r\n    );\r\n\r\n    this._componentRef = viewContainerRef.createComponent(componentFactory);\r\n\r\n    this.updateInputs();\r\n  }\r\n\r\n  updateInputs() {\r\n    if (!this._componentRef) {\r\n      return;\r\n    }\r\n\r\n    const componentRenderer = <CollectionControlRenderer>this._componentRef.instance;\r\n\r\n    const control: ICollectionControl = {\r\n      ...this.control,\r\n      onAdd: this.onAdd\r\n    };\r\n\r\n    const previousControl = componentRenderer.control;\r\n    componentRenderer.control = control;\r\n\r\n    const onComponentChange = (<OnChanges>this._componentRef.instance).ngOnChanges;\r\n\r\n    if (onComponentChange) {\r\n      const change: SimpleChange = {\r\n        previousValue: previousControl,\r\n        currentValue: control,\r\n        firstChange: typeof previousControl === 'undefined',\r\n        isFirstChange: () => change.firstChange\r\n      };\r\n\r\n      onComponentChange.call(componentRenderer, { control: change });\r\n    }\r\n  }\r\n\r\n  onAdd = (e) => {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    const reference = (<IReferenceField>this.control.field).reference;\r\n\r\n    const form = this.stateService.createForm(this.control.formId, reference.struct, reference.block);\r\n    this.control.value.push(form);\r\n\r\n    const index = this.control.value.controls.indexOf(form);\r\n    const childPath = `${this.control.formPath}.${index}`;\r\n\r\n    if (this.control.layout === 'table') {\r\n      this.stateService.pushNavigation(this.control.formId, reference.struct, reference.block, childPath, this.control.formPath);\r\n    }\r\n\r\n    this.control.onChange(null);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  SimpleChange\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { DeReCrudProviderService } from '../../providers/provider/provider.service';\r\nimport {\r\n  IField,\r\n  IListField,\r\n  ILinkedStructField,\r\n  ILinkedStructFieldReference,\r\n  IFieldReference\r\n} from '../models/schema';\r\nimport { FormGroup, FormArray, AbstractControl } from '@angular/forms';\r\nimport { FormState } from '../models/form-state';\r\nimport { FormStateService } from '../services/form-state.service';\r\nimport {\r\n  ControlRenderer,\r\n  IControl,\r\n  ISelectControl,\r\n  ICollectionControl\r\n} from '../renderers/control.renderer';\r\nimport { ComponentHostDirective } from './component-host.directive';\r\nimport { CollectionFieldHostComponent } from './collection-field-host.component';\r\n\r\n\r\n@Component({\r\n  selector: 'de-re-crud-input-field-host',\r\n  template: `\r\n    <ng-template deReCrudComponentHost></ng-template>`\r\n})\r\nexport class InputFieldHostComponent implements OnInit, OnChanges, OnDestroy {\r\n  private _componentRefs: ComponentRef<any>[] = [];\r\n  private _submissionErrorsChangeSubscription: Subscription;\r\n  private _formChangeSubscription: Subscription;\r\n  private _valueOnFocus: any;\r\n  @ViewChild(ComponentHostDirective) componentHost: ComponentHostDirective;\r\n  @Input() formId: number;\r\n  @Input() form: FormGroup;\r\n  @Input() struct: string;\r\n  @Input() block: string;\r\n  @Input() field: IField;\r\n  @Input() parentForm: AbstractControl;\r\n  @Input() parentPath: string;\r\n  state: FormState;\r\n  fieldReference: IFieldReference;\r\n\r\n  constructor(\r\n    private stateService: FormStateService,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private providerService: DeReCrudProviderService\r\n  ) {\r\n  }\r\n\r\n  get formPath() {\r\n    let formPath = this.field.name;\r\n\r\n    if (this.parentPath) {\r\n      let parentPath = this.parentPath;\r\n\r\n      if (this.parentForm instanceof FormArray) {\r\n        const index = this.parentForm.controls.indexOf(this.form);\r\n        parentPath += '.' + index;\r\n      }\r\n\r\n      formPath = `${parentPath}.${formPath}`;\r\n    }\r\n\r\n    return formPath;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.state = this.stateService.get(this.formId);\r\n\r\n    const fieldReference = this.state.blocks[`${this.struct}-${this.block}`].fields.find(\r\n      x => x.field === this.field.name\r\n    );\r\n\r\n    this.fieldReference = fieldReference;\r\n\r\n    this._submissionErrorsChangeSubscription = this.state.onSubmissionErrorsChange.subscribe(\r\n      () => {\r\n        this.updateInputs();\r\n      }\r\n    );\r\n\r\n    this._formChangeSubscription = this.form.valueChanges.subscribe(\r\n      () => {\r\n        if (!this.shouldRender()) {\r\n          this.destroyRefs();\r\n        } else if (!this._componentRefs.length) {\r\n          this.render();\r\n        } else {\r\n          this.updateInputs();\r\n        }\r\n      }\r\n    );\r\n\r\n    this.render();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.formId && !changes.formId.isFirstChange()) {\r\n      this.ngOnDestroy();\r\n      this.ngOnInit();\r\n      return;\r\n    }\r\n\r\n    this.updateInputs();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._submissionErrorsChangeSubscription) {\r\n      this._submissionErrorsChangeSubscription.unsubscribe();\r\n    }\r\n\r\n    if (this._formChangeSubscription) {\r\n      this._formChangeSubscription.unsubscribe();\r\n    }\r\n\r\n    this.destroyRefs();\r\n  }\r\n\r\n  destroyRefs() {\r\n    if (this._componentRefs.length) {\r\n      this._componentRefs.forEach(x => x.destroy());\r\n      this._componentRefs = [];\r\n    }\r\n  }\r\n\r\n  shouldRender() {\r\n    return this.fieldReference && this.fieldReference.condition(this.form.value, this.state.form.root.value);\r\n  }\r\n\r\n  render() {\r\n    this.destroyRefs();\r\n\r\n    if (!this.shouldRender()) {\r\n      return;\r\n    }\r\n\r\n    let controlComponent: any;\r\n\r\n    const providerOptions = this.providerService.get(\r\n      this.state.options.provider\r\n    );\r\n\r\n    switch (this.field.type) {\r\n      case 'text':\r\n      case 'integer':\r\n      case 'date':\r\n        controlComponent = providerOptions.inputComponent;\r\n        break;\r\n      case 'boolean':\r\n        controlComponent = providerOptions.checkboxComponent;\r\n        break;\r\n      case 'list':\r\n      case 'foreignKey':\r\n        controlComponent = providerOptions.selectComponent;\r\n        break;\r\n      case 'linkedStruct':\r\n        controlComponent = CollectionFieldHostComponent;\r\n        break;\r\n      default:\r\n        console.error(\r\n          `${this.field.type} control is not supported.`,\r\n          JSON.stringify(this.field)\r\n        );\r\n        return;\r\n    }\r\n\r\n    const viewContainerRef = this.componentHost.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const containerComponentFactory = this.componentFactoryResolver.resolveComponentFactory(\r\n      providerOptions.containerComponent\r\n    );\r\n\r\n    const controlComponentFactory = this.componentFactoryResolver.resolveComponentFactory(\r\n      controlComponent\r\n    );\r\n\r\n    const controlComponentRef = viewContainerRef.createComponent(\r\n      controlComponentFactory\r\n    );\r\n\r\n    const containerComponentRef = viewContainerRef.createComponent(\r\n      containerComponentFactory,\r\n      0,\r\n      undefined,\r\n      [[controlComponentRef.location.nativeElement]]\r\n    );\r\n\r\n    this._componentRefs.push(controlComponentRef, containerComponentRef);\r\n\r\n    this.updateInputs();\r\n  }\r\n\r\n  updateInputs() {\r\n    if (this.shouldRender() && !this._componentRefs.length) {\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    if (!this._componentRefs.length) {\r\n      return;\r\n    }\r\n\r\n    const formPath = this.formPath;\r\n    const value = this.form.root.get(formPath);\r\n\r\n    const control: IControl = {\r\n      value,\r\n      formPath,\r\n      field: this.field,\r\n      formId: this.formId,\r\n      submissionErrors:\r\n        (this.state.submissionErrors &&\r\n          this.state.submissionErrors[formPath]) ||\r\n        [],\r\n      form: this.form,\r\n      rendererType: this.mapType(this.field.type),\r\n      htmlId: `${this.formId}-${formPath}`,\r\n      onFocus: this.onFocus,\r\n      onBlur: this.onBlur,\r\n      onChange: this.onChange\r\n    };\r\n\r\n    switch (this.field.type) {\r\n      case 'list':\r\n      case 'foreignKey': {\r\n        const listField = <IListField>this.field;\r\n\r\n        const selectControl = <ISelectControl>control;\r\n\r\n        if (this.field.type === 'foreignKey') {\r\n          selectControl.options = () => [];\r\n        } else {\r\n          selectControl.options = () => listField.options;\r\n        }\r\n        break;\r\n      }\r\n      case 'linkedStruct': {\r\n        const collectionControl = <ICollectionControl>control;\r\n\r\n        const linkedStructField = <ILinkedStructField>this.field;\r\n        const { reference } = linkedStructField;\r\n\r\n        const blockFields = this.state.blocks[`${this.struct}-${this.block}`].fields;\r\n\r\n        const { hints } = <ILinkedStructFieldReference>blockFields.find(\r\n          x => x.field === linkedStructField.name\r\n        );\r\n\r\n        const referenceBlock = (hints && hints.block) || reference.block;\r\n\r\n        const fieldReferences = <ILinkedStructFieldReference[]>this.state\r\n          .blocks[`${reference.struct}-${referenceBlock}`].fields;\r\n\r\n        const nestedFields = [];\r\n\r\n        for (const fieldReference of fieldReferences) {\r\n          const field = this.state.fields[`${reference.struct}-${fieldReference.field}`];\r\n          nestedFields.push(field);\r\n        }\r\n\r\n        const nestedValues = [];\r\n\r\n        for (const nestedValue of collectionControl.value.controls) {\r\n          nestedValues.push(<FormGroup>nestedValue);\r\n        }\r\n\r\n        collectionControl.stamp = {\r\n          text: control.field.label,\r\n          headerSize: this.state.options.headerSize\r\n        };\r\n\r\n        collectionControl.canAdd = !linkedStructField.maxInstances || nestedValues.length < linkedStructField.maxInstances;\r\n        collectionControl.nestedValues = nestedValues;\r\n        collectionControl.nestedFields = nestedFields;\r\n        collectionControl.layout = (hints && hints.layout) || 'inline';\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (const componentRef of this._componentRefs) {\r\n      const componentRenderer = <ControlRenderer>componentRef.instance;\r\n\r\n      const previousControl = componentRenderer.control;\r\n      componentRenderer.control = control;\r\n\r\n      const onComponentChange = (<OnChanges>componentRef.instance).ngOnChanges;\r\n      if (onComponentChange) {\r\n        const change: SimpleChange = {\r\n          previousValue: previousControl,\r\n          currentValue: control,\r\n          firstChange: typeof previousControl === 'undefined',\r\n          isFirstChange: () => change.firstChange\r\n        };\r\n\r\n        onComponentChange.call(componentRenderer, { control: change });\r\n      }\r\n    }\r\n  }\r\n\r\n  onFocus = () => {\r\n    this._valueOnFocus = this.form.root.get(this.formPath).value;\r\n  }\r\n\r\n  onBlur = () => {\r\n    const newValue = this.form.root.get(this.formPath).value;\r\n\r\n    if (this._valueOnFocus !== newValue) {\r\n      this.stateService.onChange(this.formId, this.formPath, newValue, 'blur');\r\n    }\r\n  }\r\n\r\n  onChange = (e: any) => {\r\n    const newValue = this.form.root.get(this.formPath).value;\r\n    this.stateService.onChange(this.formId, this.formPath, newValue, e ? 'change' : null);\r\n  }\r\n\r\n  private mapType(type: string) {\r\n    switch (type) {\r\n      case 'integer':\r\n        return 'number';\r\n      default:\r\n        return type;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { DeReCrudProviderService } from '../../providers/provider/provider.service';\r\nimport { FormState } from '../models/form-state';\r\nimport { ButtonRenderer } from '../renderers/button.renderer';\r\nimport { FormStateService } from '../services/form-state.service';\r\nimport { ComponentHostDirective } from './component-host.directive';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-button-host',\r\n  template: `<ng-template deReCrudComponentHost></ng-template>`\r\n})\r\nexport class ButtonHostComponent implements OnInit, OnChanges, OnDestroy {\r\n  private _componentRef: ComponentRef<any>;\r\n  @ViewChild(ComponentHostDirective) componentHost: ComponentHostDirective;\r\n  @Input() formId: number;\r\n  @Input() type: 'button' | 'submit' | 'cancel';\r\n  @Input() extraClasses: string | string[];\r\n  @Input() text: string;\r\n  @Input() disabled: boolean;\r\n  @Output() click = new EventEmitter<any>();\r\n  state: FormState;\r\n\r\n  constructor(\r\n    private stateService: FormStateService,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private providerService: DeReCrudProviderService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.state = this.stateService.get(this.formId);\r\n    this.render();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.formId && !changes.formId.isFirstChange()) {\r\n      this.ngOnDestroy();\r\n      this.ngOnInit();\r\n      return;\r\n    }\r\n\r\n    this.updateInputs();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._componentRef) {\r\n      this._componentRef.destroy();\r\n      this._componentRef = null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this._componentRef) {\r\n      this._componentRef.destroy();\r\n      this._componentRef = null;\r\n    }\r\n\r\n    const providerOptions = this.providerService.get(\r\n      this.state.options.provider\r\n    );\r\n\r\n    const viewContainerRef = this.componentHost.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(\r\n      providerOptions.buttonComponent\r\n    );\r\n\r\n    this._componentRef = viewContainerRef.createComponent(componentFactory);\r\n\r\n    this.updateInputs();\r\n  }\r\n\r\n  updateInputs() {\r\n    if (!this._componentRef) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      options: { struct, submitButtonStyle, cancelButtonStyle },\r\n      structs\r\n    } = this.state;\r\n\r\n    const isSubmit = this.type === 'submit';\r\n\r\n    let style = null;\r\n\r\n    switch (this.type) {\r\n      case 'submit':\r\n        style = submitButtonStyle;\r\n        break;\r\n      case 'cancel':\r\n        style = cancelButtonStyle;\r\n        break;\r\n    }\r\n\r\n    let text = (style && style.text) || this.text;\r\n\r\n    if (\r\n      isSubmit &&\r\n      submitButtonStyle &&\r\n      submitButtonStyle.appendSchemaLabel\r\n    ) {\r\n      text = `${text} ${structs[struct].label}`;\r\n    }\r\n\r\n    const extraClasses = [];\r\n\r\n    if (this.state.options.extraButtonClasses) {\r\n      extraClasses.push(...this.state.options.extraButtonClasses);\r\n    }\r\n\r\n    if (this.extraClasses) {\r\n      if (typeof this.extraClasses === 'string') {\r\n        extraClasses.push(...this.extraClasses.split(' '));\r\n      } else {\r\n        extraClasses.push(...this.extraClasses);\r\n      }\r\n    }\r\n\r\n    const componentRenderer = <ButtonRenderer>this._componentRef.instance;\r\n    componentRenderer.button = {\r\n      text,\r\n      extraClasses,\r\n      type: isSubmit ? 'submit' : 'button',\r\n      disabled: this.disabled,\r\n      onClick: this.onClick,\r\n      class: (style && style.class) || undefined\r\n    };\r\n  }\r\n\r\n  onClick = (e) => {\r\n    this.click.emit(e);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ComponentRef,\r\n  ViewChild,\r\n  Input,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  ComponentFactoryResolver,\r\n  SimpleChanges,\r\n  SimpleChange\r\n} from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { DeReCrudProviderService } from '../../providers/provider/provider.service';\r\nimport { IField, IFieldReference, IStampField } from '../models/schema';\r\nimport { FormStateService } from '../services/form-state.service';\r\nimport { StampRenderer, IStamp } from '../renderers/stamp.renderer';\r\nimport { FormState } from '../models/form-state';\r\nimport { ComponentHostDirective } from './component-host.directive';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-stamp-field-host',\r\n  template: `<ng-template deReCrudComponentHost></ng-template>`\r\n})\r\nexport class StampFieldHostComponent implements OnInit, OnChanges, OnDestroy {\r\n  private _componentRef: ComponentRef<any>;\r\n  @ViewChild(ComponentHostDirective) componentHost: ComponentHostDirective;\r\n  @Input() formId: number;\r\n  @Input() form: FormGroup;\r\n  @Input() struct: string;\r\n  @Input() block: string;\r\n  @Input() field: IField;\r\n  state: FormState;\r\n  fieldReference: IFieldReference;\r\n\r\n  constructor(\r\n    private stateService: FormStateService,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private providerService: DeReCrudProviderService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.state = this.stateService.get(this.formId);\r\n\r\n    const fieldReference = this.state.blocks[\r\n      `${this.struct}-${this.block}`\r\n    ].fields.find(x => x.field === this.field.name);\r\n\r\n    this.fieldReference = fieldReference;\r\n\r\n    this.render();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.formId && !changes.formId.isFirstChange()) {\r\n      this.ngOnDestroy();\r\n      this.ngOnInit();\r\n      return;\r\n    }\r\n\r\n    this.updateInputs();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._componentRef) {\r\n      this._componentRef.destroy();\r\n      this._componentRef = null;\r\n    }\r\n  }\r\n\r\n  shouldRender() {\r\n    return this.fieldReference.condition(\r\n      this.form.value,\r\n      this.state.form.root.value\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this._componentRef) {\r\n      this._componentRef.destroy();\r\n      this._componentRef = null;\r\n    }\r\n\r\n    if (!this.shouldRender()) {\r\n      return;\r\n    }\r\n\r\n    let controlComponent: any;\r\n\r\n    const providerOptions = this.providerService.get(\r\n      this.state.options.provider\r\n    );\r\n\r\n    switch (this.field.type) {\r\n      case 'stamp':\r\n        controlComponent = providerOptions.stampComponent;\r\n        break;\r\n      default:\r\n        console.error(\r\n          `${this.field.type} control is not supported.`,\r\n          JSON.stringify(this.field)\r\n        );\r\n        return;\r\n    }\r\n\r\n    const viewContainerRef = this.componentHost.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(\r\n      controlComponent\r\n    );\r\n\r\n    this._componentRef = viewContainerRef.createComponent(componentFactory);\r\n\r\n    this.updateInputs();\r\n  }\r\n\r\n  updateInputs() {\r\n    if (!this._componentRef) {\r\n      return;\r\n    }\r\n\r\n    const componentRenderer = <StampRenderer>this._componentRef.instance;\r\n    const stampField = <IStampField>this.field;\r\n\r\n    const stamp: IStamp = {\r\n      text: stampField.label,\r\n      headerSize: this.state.options.headerSize\r\n    };\r\n\r\n    if (stampField.hints) {\r\n      if (stampField.hints.headerSize) {\r\n        stamp.headerSize = stampField.hints.headerSize;\r\n      }\r\n\r\n      if (stampField.hints.displayClassNames) {\r\n        stamp.classes = stampField.hints.displayClassNames;\r\n      }\r\n    }\r\n\r\n    const previousStamp = componentRenderer.stamp;\r\n    componentRenderer.stamp = stamp;\r\n\r\n    const onComponentChange = (<OnChanges>this._componentRef.instance)\r\n      .ngOnChanges;\r\n\r\n    if (onComponentChange) {\r\n      const change: SimpleChange = {\r\n        previousValue: previousStamp,\r\n        currentValue: stamp,\r\n        firstChange: typeof previousStamp === 'undefined',\r\n        isFirstChange: () => change.firstChange\r\n      };\r\n\r\n      onComponentChange.call(componentRenderer, { control: change });\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, SimpleChanges, OnChanges, OnInit } from '@angular/core';\r\nimport { FormGroup, AbstractControl } from '@angular/forms';\r\nimport { IField } from '../../models/schema';\r\nimport { FormState } from '../../models/form-state';\r\nimport { FormStateService } from '../../services/form-state.service';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-form-host',\r\n  template: `<ng-container *ngFor=\"let field of fields\">\r\n  <ng-container [ngSwitch]=\"field.type\">\r\n    <de-re-crud-stamp-field-host\r\n      *ngSwitchCase=\"'stamp'\"\r\n      [formId]=\"formId\"\r\n      [form]=\"form\"\r\n      [field]=\"field\"\r\n      [struct]=\"struct\"\r\n      [block]=\"block\">\r\n    </de-re-crud-stamp-field-host>\r\n    <de-re-crud-input-field-host\r\n      *ngSwitchDefault\r\n      [formId]=\"formId\"\r\n      [form]=\"form\"\r\n      [parentPath]=\"parentPath\"\r\n      [parentForm]=\"parentForm\"\r\n      [field]=\"field\"\r\n      [struct]=\"struct\"\r\n      [block]=\"block\">\r\n    </de-re-crud-input-field-host>\r\n  </ng-container>\r\n</ng-container>\r\n`\r\n})\r\nexport class FormHostComponent implements OnInit, OnChanges {\r\n  private _struct: string;\r\n  private _block: string;\r\n\r\n  @Input() formId: number;\r\n  @Input() form: FormGroup;\r\n  @Input() fields: IField[];\r\n  @Input() parentForm: AbstractControl;\r\n  @Input() parentPath: string;\r\n  state: FormState;\r\n\r\n  constructor(\r\n    private stateService: FormStateService\r\n  ) {}\r\n\r\n  get struct() {\r\n    return this._struct || this.state.options.struct;\r\n  }\r\n\r\n  @Input()\r\n  set struct(value: string) {\r\n    this._struct = value;\r\n  }\r\n\r\n  get block() {\r\n    return this._block || this.state.options.block;\r\n  }\r\n\r\n  @Input()\r\n  set block(value: string) {\r\n    this._block = value;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.state = this.stateService.get(this.formId);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.formId && !changes.formId.isFirstChange()) {\r\n      this.ngOnInit();\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { ComponentHostDirective } from './hosts/component-host.directive';\r\nimport { InputFieldHostComponent } from './hosts/input-field-host.component';\r\nimport { ButtonHostComponent } from './hosts/button-host.component';\r\nimport { FormBuilderService } from './services/form-builder.service';\r\nimport { FormStateService } from './services/form-state.service';\r\nimport { CollectionFieldHostComponent } from './hosts/collection-field-host.component';\r\nimport { StampFieldHostComponent } from './hosts/stamp-field-host.component';\r\nimport { FormHostComponent } from './hosts/form-host/form-host.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [\r\n    ComponentHostDirective,\r\n    InputFieldHostComponent,\r\n    StampFieldHostComponent,\r\n    ButtonHostComponent,\r\n    CollectionFieldHostComponent,\r\n    FormHostComponent\r\n  ],\r\n  providers: [FormStateService, FormBuilderService],\r\n  exports: [InputFieldHostComponent, StampFieldHostComponent, ButtonHostComponent, FormHostComponent],\r\n  entryComponents: [CollectionFieldHostComponent]\r\n})\r\nexport class DeReCrudCoreModule { }\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormStateService } from '../../core/services/form-state.service';\r\nimport { DeReCrudOptions } from '../../core/models/options';\r\nimport { IField } from '../../core/models/schema';\r\nimport { FormSubmission, FormSubmissionErrors } from '../../core/models/form-submission';\r\nimport { FormChange } from '../../core/models/form-change';\r\nimport { FormState } from '../../core/models/form-state';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-form',\r\n  template: `<form *ngIf=\"state.form\" [formGroup]=\"state.form\">\r\n  <de-re-crud-form-host [formId]=\"state.id\"\r\n                        [form]=\"form\"\r\n                        [struct]=\"struct\"\r\n                        [block]=\"block\"\r\n                        [parentPath]=\"parentPath\"\r\n                        [parentForm]=\"parentForm\"\r\n                        [fields]=\"fields\">\r\n  </de-re-crud-form-host>\r\n  <de-re-crud-button-host type=\"submit\"\r\n                          [formId]=\"state.id\"\r\n                          [disabled]=\"!submitEnabled\"\r\n                          text=\"Submit\"\r\n                          (click)=\"onSubmit($event)\">\r\n  </de-re-crud-button-host>\r\n  <de-re-crud-button-host *ngIf=\"cancelVisible\"\r\n                          type=\"cancel\"\r\n                          [formId]=\"state.id\"\r\n                          [disabled]=\"!cancelEnabled\"\r\n                          text=\"Cancel\"\r\n                          (click)=\"onCancel($event)\">\r\n  </de-re-crud-button-host>\r\n</form>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class FormComponent implements OnInit, OnChanges, OnDestroy {\r\n  private _navigationChangeSubscription: Subscription;\r\n  private _formChangeSubscription: Subscription;\r\n  private _cancelVisible: boolean;\r\n\r\n  @Input() options: DeReCrudOptions;\r\n  @Input() value: object;\r\n  @Input() errors: FormSubmissionErrors;\r\n  @Output() valueChange = new EventEmitter<FormChange>();\r\n  @Output() submit = new EventEmitter<FormSubmission>();\r\n  @Output() cancel = new EventEmitter<any>();\r\n\r\n  fields: IField[];\r\n  state: FormState;\r\n  submitting: boolean;\r\n\r\n  constructor(private stateService: FormStateService) {}\r\n\r\n  get cancelVisible() {\r\n    return !!this.state.navigationStack.length || this._cancelVisible;\r\n  }\r\n\r\n  @Input()\r\n  set cancelVisible(value: boolean) {\r\n    this._cancelVisible = value;\r\n  }\r\n\r\n  get submitEnabled() {\r\n    return !this.submitting && this.form.valid;\r\n  }\r\n\r\n  get cancelEnabled() {\r\n    return !this.submitting;\r\n  }\r\n\r\n  get struct() {\r\n    const { navigationStack } = this.state;\r\n    const navigationStackCount = navigationStack.length;\r\n\r\n    return navigationStackCount\r\n      ? navigationStack[navigationStackCount - 1].struct\r\n      : this.state.options.struct;\r\n  }\r\n\r\n  get block() {\r\n    const { navigationStack } = this.state;\r\n    const navigationStackCount = navigationStack.length;\r\n\r\n    return navigationStackCount\r\n      ? navigationStack[navigationStackCount - 1].block\r\n      : this.state.options.block;\r\n  }\r\n\r\n  get form() {\r\n    const { navigationStack } = this.state;\r\n    const navigationStackCount = navigationStack.length;\r\n\r\n    return navigationStackCount\r\n      ? this.state.form.get(navigationStack[navigationStackCount - 1].path)\r\n      : this.state.form;\r\n  }\r\n\r\n  get parentPath() {\r\n    const { navigationStack } = this.state;\r\n    const navigationStackCount = navigationStack.length;\r\n\r\n    return navigationStackCount\r\n      ? navigationStack[navigationStackCount - 1].parentPath\r\n      : null;\r\n  }\r\n\r\n  get parentForm(): (AbstractControl | null) {\r\n    const { navigationStack } = this.state;\r\n    const navigationStackCount = navigationStack.length;\r\n\r\n    return navigationStackCount\r\n      ? this.state.form.get(navigationStack[navigationStackCount - 1].parentPath)\r\n      : null;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.state = this.stateService.create(this.options, this.value, this.errors);\r\n    this.update();\r\n\r\n    this._navigationChangeSubscription = this.state.onNavigationChange.subscribe(() => {\r\n      this.update();\r\n    });\r\n\r\n    this._formChangeSubscription = this.state.onValueChange.subscribe((change) => {\r\n      this.valueChange.emit(change);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.value && !changes.value.firstChange) {\r\n      this.stateService.update(this.state.id, changes.value.currentValue);\r\n    }\r\n\r\n    if (changes.errors && !changes.errors.firstChange) {\r\n      this.stateService.setErrors(this.state.id, changes.errors.currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._navigationChangeSubscription) {\r\n      this._navigationChangeSubscription.unsubscribe();\r\n    }\r\n\r\n    if (this._formChangeSubscription) {\r\n      this._formChangeSubscription.unsubscribe();\r\n    }\r\n\r\n    this.stateService.remove(this.state.id);\r\n  }\r\n\r\n  update() {\r\n    const { options, navigationStack } = this.state;\r\n\r\n    let struct;\r\n    let block;\r\n\r\n    const child = navigationStack[navigationStack.length - 1];\r\n    if (child) {\r\n      ({ struct, block } = child);\r\n    } else {\r\n      ({ struct, block } = options);\r\n    }\r\n\r\n    const blockFields = this.getBlockFields(struct, block);\r\n\r\n    this.fields = blockFields;\r\n  }\r\n\r\n  getBlockFields(struct: string, blockName: string) {\r\n    const { blocks, fields } = this.state;\r\n    if (!blocks || !fields) {\r\n       // TODO: Log error\r\n      return [];\r\n    }\r\n\r\n    const block = blocks[`${struct}-${blockName}`];\r\n\r\n    if (!block) {\r\n      // TODO: Log error\r\n      return [];\r\n    }\r\n\r\n    const references = block.fields;\r\n\r\n    const blockFields = [];\r\n\r\n    for (const reference of references) {\r\n      blockFields.push(fields[`${struct}-${reference.field}`]);\r\n    }\r\n\r\n    return blockFields;\r\n  }\r\n\r\n  onCancel(e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    if (!this.cancelEnabled) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.navigationStack.length) {\r\n      this.stateService.popNavigation(this.state.id);\r\n      return;\r\n    }\r\n\r\n    this.cancel.emit();\r\n    this.state.form.reset();\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    if (!this.submitEnabled) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.navigationStack.length) {\r\n      this.stateService.completeNavigation(this.state.id);\r\n      return;\r\n    }\r\n\r\n    this.submitting = true;\r\n\r\n    this.submit.emit({\r\n      value: this.state.form.value,\r\n      onComplete: (errors) => {\r\n        if (!errors) {\r\n          this.stateService.clearErrors(this.state.id);\r\n          this.state.form.reset();\r\n        } else {\r\n          this.stateService.setErrors(this.state.id, errors);\r\n        }\r\n\r\n        this.submitting = false;\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { DeReCrudCoreModule } from '../core/core.module';\r\nimport { FormComponent } from './form/form.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    DeReCrudCoreModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [\r\n    FormComponent\r\n  ],\r\n  exports: [FormComponent]\r\n})\r\nexport class DeReCrudFormsModule { }\r\n","import { IControl } from './renderers/control.renderer';\r\n\r\n// @dynamic\r\nexport class ValidationErrorHelper {\r\n  private static _errorSort = ['required'];\r\n\r\n  private static getFormControlIfErrorFound(control: IControl) {\r\n    const formControl = control.form.get(control.field.name);\r\n\r\n    if (\r\n      (!formControl.errors || !formControl.touched) &&\r\n      !control.submissionErrors.length\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    return formControl;\r\n  }\r\n\r\n  static hasError(control: IControl) {\r\n    return !!this.getFormControlIfErrorFound(control);\r\n  }\r\n\r\n  static getErrors(control: IControl) {\r\n    const formControl = this.getFormControlIfErrorFound(control);\r\n    if (!formControl) {\r\n      return null;\r\n    }\r\n\r\n    const sortedErrors = [];\r\n    const unsortedErrors = [];\r\n\r\n    if (formControl.errors && formControl.touched) {\r\n      for (const key of Object.keys(formControl.errors)) {\r\n        const sort = this._errorSort[key];\r\n        const metadata = formControl.errors[key];\r\n\r\n        if (typeof sort === 'undefined') {\r\n          unsortedErrors.push({ key, metadata });\r\n        } else {\r\n          sortedErrors.push({ key, metadata, sort });\r\n        }\r\n      }\r\n    }\r\n\r\n    return sortedErrors\r\n      .sort(x => x.sort)\r\n      .concat(unsortedErrors)\r\n      .map(this.getErrorMessage)\r\n      .concat(control.submissionErrors);\r\n  }\r\n\r\n  static getErrorMessage(error: { key: string; metadata: any }) {\r\n    switch (error.key) {\r\n      case 'required':\r\n        return 'This field is required.';\r\n      case 'minlength':\r\n        return `This field must have at least ${\r\n          error.metadata.requiredLength\r\n        } characters.`;\r\n      case 'maxlength':\r\n        return `This field can not exceed ${\r\n          error.metadata.requiredLength\r\n        } characters.`;\r\n      default:\r\n        return `Validation failed with error: ${error}`;\r\n    }\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { ControlRenderer, IControl } from '../../../core/renderers/control.renderer';\r\nimport { ValidationErrorHelper } from '../../../core/validation-error-helper';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-bootstrap3-control-container-renderer',\r\n  template: `<div class=\"form-group\" [ngClass]=\"getClasses()\">\r\n  <ng-content></ng-content>\r\n</div>\r\n`\r\n})\r\nexport class Bootstrap3ControlContainerRendererComponent implements ControlRenderer {\r\n  @Input() control: IControl;\r\n\r\n  getClasses() {\r\n    const hasError = ValidationErrorHelper.hasError(this.control);\r\n\r\n    return {\r\n      'has-error': hasError,\r\n      'has-feedback': hasError\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DeReCrudProviderService } from './provider.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [DeReCrudProviderService],\r\n  declarations: []\r\n})\r\nexport class DeReCrudProviderModule {}\r\n","import { Component, Input } from '@angular/core';\r\nimport { ControlRenderer, IControl } from '../../../core/renderers/control.renderer';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-bootstrap3-input-renderer',\r\n  template: `<ng-container [formGroup]=\"control.form\">\r\n  <de-re-crud-bootstrap3-label-renderer [control]=\"control\">\r\n  </de-re-crud-bootstrap3-label-renderer>\r\n  <input class=\"form-control\"\r\n         [type]=\"control.rendererType\"\r\n         [id]=\"control.htmlId\"\r\n         [name]=\"control.field.name\"\r\n         [formControlName]=\"control.field.name\"\r\n         (focus)=\"control.onFocus($event)\"\r\n         (blur)=\"control.onBlur($event)\"\r\n         (input)=\"control.onChange($event)\" />\r\n  <de-re-crud-bootstrap3-help-renderer [control]=\"control\">\r\n  </de-re-crud-bootstrap3-help-renderer>\r\n  <de-re-crud-bootstrap3-validation-errors-renderer [control]=\"control\">\r\n  </de-re-crud-bootstrap3-validation-errors-renderer>\r\n</ng-container>\r\n`\r\n})\r\nexport class Bootstrap3InputRendererComponent implements ControlRenderer {\r\n  @Input() control: IControl;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { ControlRenderer, ISelectControl } from '../../../core/renderers/control.renderer';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-bootstrap3-select-renderer',\r\n  template: `<ng-container [formGroup]=\"control.form\">\r\n  <de-re-crud-bootstrap3-label-renderer [control]=\"control\"></de-re-crud-bootstrap3-label-renderer>\r\n  <select class=\"form-control\"\r\n          [id]=\"control.htmlId\"\r\n          [name]=\"control.field.name\"\r\n          [formControlName]=\"control.field.name\"\r\n          (focus)=\"control.onFocus($event)\"\r\n          (blur)=\"control.onBlur($event)\"\r\n          (change)=\"control.onChange($event)\">\r\n    <option *ngFor=\"let option of control.options\" [value]=\"option.value\">{{option.label}}</option>\r\n  </select>\r\n  <de-re-crud-bootstrap3-help-renderer [control]=\"control\">\r\n  </de-re-crud-bootstrap3-help-renderer>\r\n  <de-re-crud-bootstrap3-validation-errors-renderer [control]=\"control\">\r\n  </de-re-crud-bootstrap3-validation-errors-renderer>\r\n</ng-container>\r\n`\r\n})\r\nexport class Bootstrap3SelectRendererComponent implements ControlRenderer {\r\n  @Input() control: ISelectControl;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { ControlRenderer, IControl } from '../../../core/renderers/control.renderer';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-bootstrap3-label-renderer',\r\n  template: `<label class=\"control-label\" [htmlFor]=\"control.htmlId\">{{control.field.label}}</label>\r\n`\r\n})\r\nexport class Bootstrap3LabelRendererComponent implements ControlRenderer {\r\n  @Input() control: IControl;\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { ButtonRenderer, IButton } from '../../../core/renderers/button.renderer';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-bootstrap3-button-renderer',\r\n  template: `<button class=\"btn\" [ngClass]=\"classes\"\r\n        [type]=\"button.type\"\r\n        [disabled]=\"button.disabled\"\r\n        (click)=\"button.onClick($event)\">\r\n  {{button.text}}\r\n</button>\r\n`\r\n})\r\nexport class Bootstrap3ButtonRendererComponent implements OnInit, OnChanges, ButtonRenderer {\r\n  @Input() button: IButton;\r\n  _classes: string[];\r\n\r\n  get classes() {\r\n    let classes: string[];\r\n\r\n    if (this._classes) {\r\n      classes = this._classes;\r\n    }\r\n\r\n    if (this.button.extraClasses) {\r\n      classes = (classes || []).concat(this.button.extraClasses);\r\n    }\r\n\r\n    return classes;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.updateClasses();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.button) {\r\n      if (\r\n        changes.button.currentValue.type !==\r\n        changes.button.previousValue.type\r\n      ) {\r\n        this.updateClasses();\r\n      }\r\n    }\r\n  }\r\n\r\n  updateClasses() {\r\n    if (this.button.class) {\r\n      this._classes = [this.button.class];\r\n      return;\r\n    }\r\n\r\n    switch (this.button.type) {\r\n      case 'submit':\r\n        this._classes = ['btn-primary'];\r\n        break;\r\n      default:\r\n        this._classes = ['btn-default'];\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { CollectionControlRenderer, ICollectionControl } from '../../../core/renderers/control.renderer';\r\nimport { IField } from '../../../core/models/schema';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-bootstrap3-table-renderer',\r\n  template: `<div>\r\n  <de-re-crud-stamp-renderer [stamp]=\"control.stamp\">\r\n  </de-re-crud-stamp-renderer>\r\n  <de-re-crud-button-host\r\n    [formId]=\"control.formId\"\r\n    extraClasses=\"btn-sm\"\r\n    text=\"Add\"\r\n    (click)=\"control.onAdd($event)\">\r\n  </de-re-crud-button-host>\r\n</div>\r\n\r\n<div class=\"table-control-container\">\r\n  <table class=\"table table-bordered table-condensed\">\r\n    <thead>\r\n      <tr>\r\n        <th *ngFor=\"let field of control.nestedFields\">\r\n          {{field.label}}\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngIf=\"!control.nestedValues.length\">\r\n        <td colspan=\"100%\">None</td>\r\n      </tr>\r\n      <tr *ngFor=\"let form of control.nestedValues\">\r\n        <td *ngFor=\"let field of control.nestedFields\" [innerHtml]=\"getValue(field, form.value)\"></td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n`,\r\n  styles: [`.table-control-container{margin-top:10px}`]\r\n})\r\nexport class Bootstrap3TableRendererComponent implements CollectionControlRenderer {\r\n  @Input() control: ICollectionControl;\r\n\r\n  getValue(field: IField, value: any) {\r\n    const fieldValue = value[field.name];\r\n\r\n    if (fieldValue == null || typeof fieldValue === 'undefined') {\r\n      return '&nbsp;';\r\n    }\r\n\r\n    return fieldValue;\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { ControlRenderer, IControl } from '../../../core/renderers/control.renderer';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-bootstrap3-checkbox-renderer',\r\n  template: `<ng-container [formGroup]=\"control.form\">\r\n  <div class=\"checkbox\">\r\n    <label [htmlFor]=\"control.htmlId\">\r\n      <input type=\"checkbox\"\r\n        [id]=\"control.htmlId\"\r\n        [name]=\"control.field.name\"\r\n        [formControlName]=\"control.field.name\"\r\n        (focus)=\"control.onFocus($event)\"\r\n        (blur)=\"control.onBlur($event)\"\r\n        (input)=\"control.onChange($event)\" /> {{control.field.label}}\r\n    </label>\r\n  </div>\r\n  <de-re-crud-bootstrap3-help-renderer [control]=\"control\">\r\n  </de-re-crud-bootstrap3-help-renderer>\r\n  <de-re-crud-bootstrap3-validation-errors-renderer [control]=\"control\">\r\n  </de-re-crud-bootstrap3-validation-errors-renderer>\r\n</ng-container>\r\n`\r\n})\r\nexport class Bootstrap3CheckboxRendererComponent implements ControlRenderer {\r\n  @Input() control: IControl;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { SelectControlRenderer, ISelectControl } from '../../../core/renderers/control.renderer';\r\nimport { ValidationErrorHelper } from '../../../core/validation-error-helper';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-bootstrap3-help-renderer',\r\n  template: `<p *ngIf=\"control.field.help && !hasError()\" class=\"help-block\">{{control.field.help}}</p>\r\n`\r\n})\r\nexport class Bootstrap3HelpRendererComponent implements SelectControlRenderer {\r\n  @Input() control: ISelectControl;\r\n\r\n  hasError() {\r\n    return ValidationErrorHelper.hasError(this.control);\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { ControlRenderer, IControl } from '../../../core/renderers/control.renderer';\r\nimport { ValidationErrorHelper } from '../../../core/validation-error-helper';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-bootstrap3-validation-errors-renderer',\r\n  template: `<ng-container *ngIf=\"hasError()\"\r\n  [ngTemplateOutlet]=\"validationErrors\"\r\n  [ngTemplateOutletContext]=\"{ errors: getErrors() }\">\r\n</ng-container>\r\n\r\n<ng-template #validationErrors let-errors=\"errors\">\r\n  <ng-container>\r\n    <p *ngFor=\"let error of errors\" class=\"help-block\">\r\n      {{error}}\r\n    </p>\r\n  </ng-container>\r\n</ng-template>\r\n`\r\n})\r\nexport class Bootstrap3ValidationErrorsRendererComponent implements ControlRenderer {\r\n  @Input() control: IControl;\r\n\r\n  hasError() {\r\n    return ValidationErrorHelper.hasError(this.control);\r\n  }\r\n\r\n  getErrors() {\r\n    return ValidationErrorHelper.getErrors(this.control);\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { CollectionControlRenderer, ICollectionControl } from '../../../core/renderers/control.renderer';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-bootstrap3-inline-renderer',\r\n  template: `<div>\r\n  <de-re-crud-stamp-renderer [stamp]=\"control.stamp\">\r\n  </de-re-crud-stamp-renderer>\r\n  <de-re-crud-button-host\r\n    *ngIf=\"control.canAdd\"\r\n    [formId]=\"control.formId\"\r\n    extraClasses=\"btn-sm\"\r\n    text=\"Add\"\r\n    (click)=\"control.onAdd($event)\">\r\n  </de-re-crud-button-host>\r\n</div>\r\n\r\n<div class=\"inline-control-container\">\r\n  <span *ngIf=\"!control.nestedValues.length\">None</span>\r\n  <div *ngFor=\"let value of control.nestedValues\">\r\n    <de-re-crud-form-host\r\n      [formId]=\"control.formId\"\r\n      [form]=\"value\"\r\n      [parentPath]=\"control.formPath\"\r\n      [parentForm]=\"control.value\"\r\n      [fields]=\"control.nestedFields\"\r\n      [struct]=\"control.field.reference.struct\"\r\n      [block]=\"control.field.reference.block\">\r\n    </de-re-crud-form-host>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`.inline-control-container{margin-top:10px;margin-bottom:10px}`]\r\n})\r\nexport class Bootstrap3InlineRendererComponent implements CollectionControlRenderer {\r\n  control: ICollectionControl;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { StampRenderer, IStamp } from '../../../core/renderers/stamp.renderer';\r\n\r\n@Component({\r\n  selector: 'de-re-crud-stamp-renderer',\r\n  template: `<ng-container [ngSwitch]=\"stamp.headerSize\">\r\n  <h1 *ngSwitchCase=\"1\" [ngClass]=\"stamp.classes\">{{stamp.text}}</h1>\r\n  <h2 *ngSwitchCase=\"2\" [ngClass]=\"stamp.classes\">{{stamp.text}}</h2>\r\n  <h3 *ngSwitchCase=\"3\" [ngClass]=\"stamp.classes\">{{stamp.text}}</h3>\r\n  <h4 *ngSwitchCase=\"4\" [ngClass]=\"stamp.classes\">{{stamp.text}}</h4>\r\n  <h5 *ngSwitchCase=\"5\" [ngClass]=\"stamp.classes\">{{stamp.text}}</h5>\r\n  <h6 *ngSwitchCase=\"6\" [ngClass]=\"stamp.classes\">{{stamp.text}}</h6>\r\n  <p *ngSwitchDefault [ngClass]=\"stamp.classes\">{{stamp.text}}</p>\r\n</ng-container>\r\n`\r\n})\r\nexport class Bootstrap3StampRendererComponent implements StampRenderer {\r\n  @Input() stamp: IStamp;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { Bootstrap3ControlContainerRendererComponent } from './control-container-renderer/control-container-renderer.component';\r\nimport { DeReCrudCoreModule } from '../../core/core.module';\r\nimport { DeReCrudProviderModule } from '../provider/provider.module';\r\nimport { DeReCrudProviderService } from '../provider/provider.service';\r\nimport { Bootstrap3InputRendererComponent } from './input-renderer/input-renderer.component';\r\nimport { Bootstrap3SelectRendererComponent } from './select-renderer/select-renderer.component';\r\nimport { Bootstrap3LabelRendererComponent } from './label-renderer/label-renderer.component';\r\nimport { Bootstrap3ButtonRendererComponent } from './button-renderer/button-renderer.component';\r\nimport { Bootstrap3TableRendererComponent } from './table-renderer/table-renderer.component';\r\nimport { Bootstrap3CheckboxRendererComponent } from './checkbox-renderer/checkbox-renderer.component';\r\nimport { Bootstrap3HelpRendererComponent } from './help-renderer/help-renderer.component';\r\nimport { Bootstrap3ValidationErrorsRendererComponent } from './validation-errors-renderer/validation-errors-renderer.component';\r\nimport { Bootstrap3InlineRendererComponent } from './inline-renderer/inline-renderer.component';\r\nimport { Bootstrap3StampRendererComponent } from './stamp-renderer/stamp-renderer.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ReactiveFormsModule, DeReCrudCoreModule, DeReCrudProviderModule],\r\n  declarations: [\r\n    Bootstrap3ControlContainerRendererComponent,\r\n    Bootstrap3InputRendererComponent,\r\n    Bootstrap3SelectRendererComponent,\r\n    Bootstrap3LabelRendererComponent,\r\n    Bootstrap3ButtonRendererComponent,\r\n    Bootstrap3InlineRendererComponent,\r\n    Bootstrap3TableRendererComponent,\r\n    Bootstrap3CheckboxRendererComponent,\r\n    Bootstrap3HelpRendererComponent,\r\n    Bootstrap3ValidationErrorsRendererComponent,\r\n    Bootstrap3StampRendererComponent\r\n  ],\r\n  entryComponents: [\r\n    Bootstrap3ControlContainerRendererComponent,\r\n    Bootstrap3InputRendererComponent,\r\n    Bootstrap3SelectRendererComponent,\r\n    Bootstrap3ButtonRendererComponent,\r\n    Bootstrap3InlineRendererComponent,\r\n    Bootstrap3TableRendererComponent,\r\n    Bootstrap3CheckboxRendererComponent,\r\n    Bootstrap3StampRendererComponent\r\n  ]\r\n})\r\nexport class Bootstrap3DeReCrudProviderModule {\r\n  constructor(providerService: DeReCrudProviderService) {\r\n    providerService.register('bootstrap3', {\r\n      stampComponent: Bootstrap3StampRendererComponent,\r\n      containerComponent: Bootstrap3ControlContainerRendererComponent,\r\n      inputComponent: Bootstrap3InputRendererComponent,\r\n      selectComponent: Bootstrap3SelectRendererComponent,\r\n      buttonComponent: Bootstrap3ButtonRendererComponent,\r\n      tableComponent: Bootstrap3TableRendererComponent,\r\n      inlineComponent: Bootstrap3InlineRendererComponent,\r\n      checkboxComponent: Bootstrap3CheckboxRendererComponent\r\n    });\r\n  }\r\n}\r\n"]}